plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    reobf = false
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}
processResources {
    from 'LICENSE.txt'
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'   : mod_id,
                'Specification-Vendor'  : mod_authors,
                'Specification-Version' : '1', // We are version 1 of ourselves
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : mod_authors,
                'MixinConfigs'          : "${mod_id}-mixins.json"
        ])
    }
}

task apiZip(type: Jar) {
    from(sourceSets.main.java) {
        include "lain/mods/cos/api/**"
    }
    from(sourceSets.main.output) {
        include "lain/mods/cos/api/**"
    }

    archiveClassifier = 'api'
}

artifacts {
    archives apiZip
}

jar.doLast {
    if (System.getenv('SIGNJAR_KEYSTORE') != null) {
        def keystore = File.createTempFile('keystore-', '.jks', getTemporaryDir()).toString()

        file(keystore).withOutputStream { output ->
            output.write(Base64.getDecoder().decode(System.getenv('SIGNJAR_KEYSTORE')))
        }
        ant.signjar(
                jar: archiveFile.get(),
                signedJar: archiveFile.get(),
                keystore: keystore,
                alias: System.getenv('SIGNJAR_ALIAS'),
                storepass: System.getenv('SIGNJAR_STOREPASS'),
                keypass: System.getenv('SIGNJAR_KEYPASS'),
                preservelastmodified: "true"
        )

        delete keystore
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
